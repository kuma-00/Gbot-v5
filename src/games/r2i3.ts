import { ExtensionClient } from "@src/types/index.ts";
import {
  MinigameBase,
  MinigameConstructor,
  MinigameData,
} from "@src/types/minigame.ts";
import { shuffle, speak } from "@src/util/index.ts";
import {
  EmbedBuilder,
  GuildMember,
  Message,
  MessageCollector,
} from "npm:discord.js";
import split from "npm:graphemesplit";
import KuromojiAnalyzer from "npm:kuroshiro-analyzer-kuromoji";
import { default as Kuroshiro } from "npm:kuroshiro/lib/index.ts";
const kuroshiro = new Kuroshiro.default();
await kuroshiro.init(new KuromojiAnalyzer());

function kanaToHira(str: string) {
  return str.replace(/[\u30a1-\u30f6]/g, function (match) {
    const chr = match.charCodeAt(0) - 0x60;
    return String.fromCharCode(chr);
  });
}

function komoziToOhmozi(str: string) {
  const komozi: Record<string, string> = {
    „ÅÅ: "„ÅÇ",
    „ÅÉ: "„ÅÑ",
    „ÅÖ: "„ÅÜ",
    „Åá: "„Åà",
    „Åâ: "„Åä",
    „Çï: "„Åã",
    „Çñ: "„Åë",
    „Å£: "„Å§",
    „ÇÉ: "„ÇÑ",
    „ÇÖ: "„ÇÜ",
    „Çá: "„Çà",
    „Çé: "„Çè",
  };
  return str.replace(/[„ÅÅ„ÅÉ„ÅÖ„Åá„Åâ„Çï„Çñ„Å£„ÇÉ„ÇÖ„Çá„Çé]/g, (str) => komozi[str]);
}

function maxCharacter(str: string) {
  const charMap: Record<string, number> = {};
  let maxNum = 0;
  let maxChar = "";

  split(str).forEach(function (char) {
    if (charMap[char]) {
      charMap[char]++;
    } else {
      charMap[char] = 1;
    }
    if (charMap[char] > maxNum) {
      maxNum = charMap[char];
      maxChar = char;
    }
  });
  return maxChar;
}

export const minigame: MinigameConstructor = class r2i3 extends MinigameBase {
  static gameData = {
    name: "r2i3",
    description: "„Åó„Çä„Å®„Çä",
    details: `„Å™„Çì„Åß„ÇÇ„ÅÇ„Çä„ÅÆ„Åó„Çä„Å®„Çä„Åß„Åô„ÄÇÊñáÂ≠ó„ÅåÁπã„Åå„Å£„Å¶„ÅÑ„Çå„Å∞Ë®±„Åï„Çå„Åæ„Åô„ÄÇ
ÁµÇ‰∫Ü„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ‰ª•‰∏ã„ÅÆÁµÇ‰∫Ü„Éú„Çø„É≥„ÇíÊäº„Åô„Åã„ÄÅ„Éó„É¨„Ç§„É§„Éº„ÅåÔΩ¢„Åó„Çä„Å®„ÇäÁµÇ‰∫ÜÔΩ£„Å®ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
    maxMember: 20,
    minMember: 2,
    joinInMidway: false,
  };
  data: MinigameData;
  client: ExtensionClient;
  history: string[] = ["„Åó„Çä„Å®„Çä"];
  index = 0;
  collector!: MessageCollector;
  constructor(client: ExtensionClient, data: MinigameData) {
    super(client, data);
    this.data = data;
    this.client = client;
    this.data.members = shuffle(this.data.members);
    this.start();
  }
  get nowMember(): GuildMember {
    return this.data.members[this.index];
  }
  start(): void {
    super.start();
    const filter = (m: Message) => {
      return m.author.bot == false;
    };
    this.collector = this.data.channel.createMessageCollector({ filter });
    this.collector.on("collect", this.collect.bind(this));
    this.data.channel.send(
      `\`${this.nowMember.nickname}\`„Åï„Çì„Åã„Çâ„Äå„Çä„Äç„ÅßÂßã„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
    );
    speak(
      this.client,
      this.data.channel.guild,
      `\`${this.nowMember.nickname}\`„Åï„Çì„Åã„Çâ„Äå„Çä„Äç„ÅßÂßã„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
      this.data.channel.id,
    );
  }
  async collect(m: Message): Promise<void> {
    const text = m.cleanContent;
    if (
      text == "„Åó„Çä„Å®„ÇäÁµÇ‰∫Ü" &&
      this.data.members.some((member) => member.id == m.author.id)
    ) {
      this.end();
      return;
    }
    const hiragana = split(
      (await kuroshiro.convert(kanaToHira(text), { to: "hiragana" })).replace(
        /„Éº+$/,
        "",
      ),
    );
    const last = split(this.history[this.history.length - 1]);
    const isChain =
      last.map(komoziToOhmozi).at(-1) == hiragana.map(komoziToOhmozi).at(0);
    const isNotRepeat = !this.history.includes(hiragana.join(""));
    const isAuthor = m.author.id == this.nowMember.id;
    console.log(
      `${hiragana.join("")}„ÅÆÔΩ¢${hiragana.at(-1)}(${hiragana
        .at(-1)
        ?.charCodeAt(0)
        .toString(16)})ÔΩ£`,
    );
    if (isChain && isNotRepeat && isAuthor) {
      this.history.push(hiragana.join(""));
      // m.react("‚úÖ");
      this.next();
      this.data.channel.send(`\`${hiragana.join("")}\`„ÅÆÔΩ¢${hiragana.at(-1)}ÔΩ£
\`${this.nowMember.nickname}\`„Åï„Çì„ÅÆÁï™„Åß„Åô„ÄÇ`);
      speak(
        this.client,
        this.data.channel.guild,
        `ÔΩ¢${hiragana.at(-1)}ÔΩ£„Åß${this.nowMember.nickname}„Åï„Çì„ÅÆÁï™„Åß„Åô„ÄÇ`,
        this.data.channel.id,
      );
    } else if (!isChain && isNotRepeat && isAuthor) {
      m.react("‚ùå");
      speak(
        this.client,
        this.data.channel.guild,
        "ÊñáÂ≠ó„ÅåÁπã„Åå„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ",
        this.data.channel.id,
      );
    } else if (isChain && !isNotRepeat && isAuthor) {
      m.react("üîÑ");
      speak(
        this.client,
        this.data.channel.guild,
        "‰ª•Ââç‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
        this.data.channel.id,
      );
    } else if (!isChain && !isNotRepeat && isAuthor) {
      m.react("‚ùå");
      speak(
        this.client,
        this.data.channel.guild,
        "ÊñáÂ≠ó„ÅåÁπã„Åå„Å£„Å¶„ÅÑ„Å™„ÅÑ„Åæ„Åü„ÅØ‰ª•Ââç‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",
        this.data.channel.id,
      );
    }
  }
  end(): void {
    super.end();
    const embed = new EmbedBuilder().setTitle("„Åó„Çä„Å®„ÇäÁµÇ‰∫Ü")
      .setDescription(`Á∂ö„ÅÑ„ÅüÊï∞ : ${this.history.length - 1}Âõû
ÊúÄ„ÇÇÈï∑„ÅÑ„ÇÇ„ÅÆ : ${this.history.reduce((a, b) => (a.length > b.length ? a : b))}
ÊúÄ„ÇÇÁü≠„ÅÑ„ÇÇ„ÅÆ : ${this.history.reduce((a, b) => (a.length < b.length ? a : b))}
È†ªÂá∫ÊñáÂ≠ó : ${maxCharacter(this.history.join(""))}`);
    this.data.channel.send({ embeds: [embed] });
    this.collector.stop();
  }
  next(): void {
    this.index++;
    if (this.index >= this.data.members.length) {
      this.index = 0;
    }
    return;
  }
};

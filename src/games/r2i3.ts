import { ExtensionClient } from "@src/types/index.js";
import {
  MinigameBase,
  MinigameConstructor,
  MinigameData,
} from "@src/types/minigame.js";
import { shuffle, speak } from "@src/util/index.js";
import { GuildMember, Message, MessageCollector } from "discord.js";
import { default as Kuroshiro} from "kuroshiro/lib/index.js";
const kuroshiro = new Kuroshiro.default();
import KuromojiAnalyzer from "kuroshiro-analyzer-kuromoji";
await kuroshiro.init(new KuromojiAnalyzer());
import split from "graphemesplit";

function kanaToHira(str :string) {
  return str.replace(/[\u30a1-\u30f6]/g, function(match) {
      const chr = match.charCodeAt(0) - 0x60;
      return String.fromCharCode(chr);
  });
}

function komoziToOhmozi(str :string){
  const komozi :Record<string,string> = {
    "„ÅÅ": "„ÅÇ",
    "„ÅÉ": "„ÅÑ",
    "„ÅÖ": "„ÅÜ",
    "„Åá": "„Åà",
    "„Åâ": "„Åä",
    "„Çï": "„Åã",
    "„Çñ": "„Åë",
    "„Å£": "„Å§",
    "„ÇÉ": "„ÇÑ",
    "„ÇÖ": "„ÇÜ",
    "„Çá": "„Çà",
    "„Çé": "„Çè"
  };
  return str.replace(/[„ÅÅ„ÅÉ„ÅÖ„Åá„Åâ„Çï„Çñ„Å£„ÇÉ„ÇÖ„Çá„Çé]/g,(str)=>komozi[str])
}


export const minigame: MinigameConstructor = class r2i3 extends MinigameBase {
  static gameData = {
    name: "r2i3",
    description: "„Åó„Çä„Å®„Çä",
    details:
      `„Å™„Çì„Åß„ÇÇ„ÅÇ„Çä„ÅÆ„Åó„Çä„Å®„Çä„Åß„Åô„ÄÇÊñáÂ≠ó„ÅåÁπã„Åå„Å£„Å¶„ÅÑ„Çå„Å∞Ë®±„Åï„Çå„Åæ„Åô„ÄÇ
ÁµÇ‰∫Ü„Åó„Åü„ÅÑÂ†¥Âêà„ÅØ‰ª•‰∏ã„ÅÆÁµÇ‰∫Ü„Éú„Çø„É≥„ÇíÊäº„Åô„Åã„ÄÅ„Éó„É¨„Ç§„É§„Éº„ÅåÔΩ¢„Åó„Çä„Å®„ÇäÁµÇ‰∫ÜÔΩ£„Å®ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
    maxMember: 20,
    minMember: 2,
    joinInMidway: false,
  };
  data: MinigameData;
  client: ExtensionClient;
  history: string[] = ["„Åó„Çä„Å®„Çä"];
  index = 0;
  collector!: MessageCollector;
  constructor(client: ExtensionClient, data: MinigameData) {
    super(client, data);
    this.data = data;
    this.client = client;
    this.data.members = shuffle(this.data.members);
    this.start();
  }
  get nowMember(): GuildMember {
    return this.data.members[this.index];
  }
  start(): void {
    super.start();
    const filter = (m: Message) => {return m.author.bot == false};
    this.collector = this.data.channel.createMessageCollector({ filter });
    this.collector.on("collect", this.collect.bind(this));
    this.data.channel.send(`${this.nowMember.nickname}„Åï„Çì„Åã„Çâ„Äå„Çä„Äç„ÅßÂßã„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`);
  }
  async collect(m: Message): Promise<void> {
    const text = m.cleanContent;
    const hiragana = split(await kuroshiro.convert(kanaToHira(text), { to: "hiragana" }));
    const last = split(this.history[this.history.length - 1]);
    const isChain = last.map(komoziToOhmozi).at(-1) == hiragana.map(komoziToOhmozi).at(0);
    const isNotRepeat = !this.history.includes(hiragana.join(""));
    const isAuthor = m.author.id == this.nowMember.id;
    console.log(`${hiragana.join("")}„ÅÆÔΩ¢${hiragana.at(-1)}(${hiragana.at(-1)?.charCodeAt(0).toString(16)})ÔΩ£`);
    if (isChain && isNotRepeat && isAuthor) {
      this.history.push(hiragana.join(""));
      m.react("‚úÖ");
      this.next();
      const text = `\`${hiragana.join("")}\`„ÅÆÔΩ¢${hiragana.at(-1)}ÔΩ£
      ${this.nowMember.nickname}„Åï„Çì„ÅÆÁï™„Åß„Åô„ÄÇ`;
      this.data.channel.send(text);
      speak(this.client, this.data.channel.guild, text,this.data.channel.id);
    } else if (!isChain && isNotRepeat && isAuthor) {
      m.react("‚ùå");
      speak(this.client, this.data.channel.guild, "ÊñáÂ≠ó„ÅåÁπã„Åå„Å£„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ",this.data.channel.id);
    } else if (isChain && !isNotRepeat && isAuthor) {
      m.react("üîÑ");
      speak(this.client, this.data.channel.guild, "‰ª•Ââç‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",this.data.channel.id);
    } else if (!isChain && !isNotRepeat && isAuthor) {
      m.react("‚ùå");
      speak(this.client, this.data.channel.guild, "ÊñáÂ≠ó„ÅåÁπã„Åå„Å£„Å¶„ÅÑ„Å™„ÅÑ„Åæ„Åü„ÅØ‰ª•Ââç‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ",this.data.channel.id);
    }
    if (text == "„Åó„Çä„Å®„ÇäÁµÇ‰∫Ü" && this.data.members.some((member) => member.id == m.author.id)) {
      this.end();
    }
  }
  end(): void {
    super.end();
    this.collector.stop();
  }
  next(): void {
    this.index++;
    if (this.index >= this.data.members.length) {
      this.index = 0;
    }
    return;
  }
};
